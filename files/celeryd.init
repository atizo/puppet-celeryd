#! /bin/sh
#
# chkconfig: - 55 45
# description:  Celery worker daemon
# processname: celeryd
# config: /etc/sysconfig/celeryd
# pidfile: /var/run/celeryd.pid
#
# EXAMPLE CONFIGURATION
# =====================
#
# this is an example configuration for a Python project:
#
# /etc/sysconfig/celeryd:
#
#   # Extra arguments to celeryd
#   CELERYD_OPTS="--time-limit 300"
#
#   # Name of the celery config module.#
#   CELERY_CONFIG_MODULE="celeryconfig"
#
# EXAMPLE DJANGO CONFIGURATION
# ============================
#
#   # Name of the projects settings module.
#   DJANGO_SETTINGS_MODULE="settings"
#
#   # Path to celeryd
#   CELERYD="/opt/Project/manage.py"
#
#   # Extra arguments to manage.py
#   CELERYD_OPTS="celeryd"
#
# AVAILABLE OPTIONS
# =================
#
#   * CELERYD_OPTS
#       Additional arguments to celeryd, see `celeryd --help` for a list.
#
#   * CELERYD_PID_FILE
#       Full path to the pidfile. Default is /var/run/celeryd.pid.
#
#   * CELERYD_LOG_FILE
#       Full path to the celeryd logfile. Default is /var/log/celeryd.log
#
#   * CELERYD_LOG_LEVEL
#       Log level to use for celeryd. Default is INFO.
#
#   * CELERYD
#       Path to the celeryd program. Default is `celeryd`.
#       You can point this to an virtualenv, or even use manage.py for django.
#
#   * CELERYD_USER
#       User to run celeryd as. Default is current user.
#
#   * CELERYD_GROUP
#       Group to run celeryd as. Default is current user.
#
#   * VIRTUALENV
#       Full path to the virtualenv environment to activate. Default is none.
#
#   * PYTHONPATH
#       A directory to add to the Python path.

# Source function library.
. /etc/init.d/functions

if test -f /etc/sysconfig/celeryd; then
    . /etc/sysconfig/celeryd
fi

RETVAL=0

CELERYD_LOG_FILE=${CELERYD_LOG_FILE:-${CELERYD_LOGFILE:-"/var/log/celeryd/celeryd.log"}}
CELERYD_PID_FILE=${CELERYD_PID_FILE:-${CELERYD_PIDFILE:-"/var/run/celeryd/celeryd.pid"}}
CELERYD_LOG_LEVEL=${CELERYD_LOG_LEVEL:-${CELERYD_LOGLEVEL:-"INFO"}}
CELERYD_USER=${CELERYD_USER:-"celeryd"}
CELERYD=${CELERYD:-"/usr/bin/celeryd"}
CELERYD_OPTS="$CELERYD_OPTS -f $CELERYD_LOG_FILE -l $CELERYD_LOG_LEVEL --pidfile=$CELERYD_PID_FILE"

touch $CELERYD_LOG_FILE
chmod 0770 $CELERYD_LOG_FILE
chown $CELERYD_USER:$CELERYD_GROUP $CELERYD_LOG_FILE

if [ -n "$2" ]; then
    CELERYD_OPTS="$CELERYD_OPTS $2"
fi

if [ -n "$DJANGO_SETTINGS_MODULE" ]; then
    CELERYD_OPTS="$CELERYD_OPTS --settings=$DJANGO_SETTINGS_MODULE"
fi

start() {
    echo -n $"Starting celeryd: "
    if [ -n "$VIRTUALENV" ]; then
        PYTHON=$VIRTUALENV/bin/python
    else
        PYTHON=/usr/bin/python
    fi
    su - $CELERYD_USER -c "PYTHONPATH=$PYTHONPATH $PYTHON $CELERYD $CELERYD_OPTS >>$CELERYD_LOG_FILE 2>&1 &"
    pgrep -f "$CELERYD" >/dev/null
    RETVAL=$?
    [ $RETVAL -eq 0 ] && { success; touch /var/lock/subsys/celeryd; } || failure
    echo
    return $RETVAL
}

stop() {
    echo -n $"Stopping celeryd: "
    killproc -p $CELERYD_PID_FILE $CELERYD 2>/dev/null
    RETVAL=$?
    pkill -f "$CELERYD"; pkill -9 -f "$CELERYD"
    echo
    if [ $RETVAL -eq 0 ]; then
        rm -f /var/lock/subsys/celeryd
        rm -f $CELERYD_PID_FILE
    
    fi
    return $RETVAL
}

case "$1" in
  start)
    start
    ;;

  stop)
    stop
    ;;

  restart)
    stop
    sleep 5
    start
    ;;

  status)
    status -p $CELERYD_PID_FILE "$CELERYD"
    ;;

  *)
    echo $"Usage: $0 {start|stop|restart|status}"
    exit 1
esac

exit $?
